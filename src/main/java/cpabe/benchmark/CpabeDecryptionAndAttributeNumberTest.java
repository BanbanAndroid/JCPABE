package cpabe.benchmark;

import java.io.IOException;
import java.util.UUID;

import cpabe.AbeEncrypted;
import cpabe.AbeSecretMasterKey;
import cpabe.Cpabe;
import cpabe.AbePrivateKey;
import cpabe.bsw07.Bsw07;

public class CpabeDecryptionAndAttributeNumberTest extends Benchmark {
	
	private byte[] data;
	
	private AbeSecretMasterKey msk;
	private byte[] mskData = new byte[] {0, 0, 1, 103, 116, 121, 112, 101, 32, 97, 10, 113, 32, 56, 55, 56, 48, 55, 49, 48, 55, 57, 57, 54, 54, 51, 51, 49, 50, 53, 50, 50, 52, 51, 55, 55, 56, 49, 57, 56, 52, 55, 53, 52, 48, 52, 57, 56, 49, 53, 56, 48, 54, 56, 56, 51, 49, 57, 57, 52, 49, 52, 50, 48, 56, 50, 49, 49, 48, 50, 56, 54, 53, 51, 51, 57, 57, 50, 54, 54, 52, 55, 53, 54, 51, 48, 56, 56, 48, 50, 50, 50, 57, 53, 55, 48, 55, 56, 54, 50, 53, 49, 55, 57, 52, 50, 50, 54, 54, 50, 50, 50, 49, 52, 50, 51, 49, 53, 53, 56, 53, 56, 55, 54, 57, 53, 56, 50, 51, 49, 55, 52, 53, 57, 50, 55, 55, 55, 49, 51, 51, 54, 55, 51, 49, 55, 52, 56, 49, 51, 50, 52, 57, 50, 53, 49, 50, 57, 57, 57, 56, 50, 50, 52, 55, 57, 49, 10, 104, 32, 49, 50, 48, 49, 54, 48, 49, 50, 50, 54, 52, 56, 57, 49, 49, 52, 54, 48, 55, 57, 51, 56, 56, 56, 50, 49, 51, 54, 54, 55, 52, 48, 53, 51, 52, 50, 48, 52, 56, 48, 50, 57, 53, 52, 52, 48, 49, 50, 53, 49, 51, 49, 49, 56, 50, 50, 57, 49, 57, 54, 49, 53, 49, 51, 49, 48, 52, 55, 50, 48, 55, 50, 56, 57, 51, 53, 57, 55, 48, 52, 53, 51, 49, 49, 48, 50, 56, 52, 52, 56, 48, 50, 49, 56, 51, 57, 48, 54, 53, 51, 55, 55, 56, 54, 55, 55, 54, 10, 114, 32, 55, 51, 48, 55, 53, 48, 56, 49, 56, 54, 54, 53, 52, 53, 49, 54, 50, 49, 51, 54, 49, 49, 49, 57, 50, 52, 53, 53, 55, 49, 53, 48, 52, 57, 48, 49, 52, 48, 53, 57, 55, 54, 53, 53, 57, 54, 49, 55, 10, 101, 120, 112, 50, 32, 49, 53, 57, 10, 101, 120, 112, 49, 32, 49, 48, 55, 10, 115, 105, 103, 110, 49, 32, 49, 10, 115, 105, 103, 110, 48, 32, 49, 10, 0, 0, 0, 1, 0, 0, 0, -128, 55, 25, 23, -82, -108, 61, -104, 89, -7, -105, -42, -18, -37, 111, -40, -6, -12, -59, -32, -59, 16, 89, -33, -79, -42, 9, 98, 15, 108, 73, 20, -7, 77, -82, -8, -71, -93, -100, -99, -86, 33, -18, 62, 63, 42, -19, 23, 4, 40, -102, 70, -64, -44, -47, -18, 58, -9, -67, -119, -82, -46, 67, 77, -86, 17, 71, -96, 23, 15, 8, -26, 53, 38, 122, -24, -55, 8, 110, 8, -56, -47, 16, 75, 98, -101, -49, 41, -89, -111, -33, -122, 77, 126, -73, 18, -52, 7, -17, -59, 112, 109, 8, -5, 127, 8, 70, 88, -96, 95, -32, 108, -120, 95, 83, 58, 87, -8, 85, -56, 26, 24, 36, -86, 86, -119, 56, -90, -109, 0, 0, 0, 1, 0, 0, 0, -128, 92, -91, 2, 89, -102, 55, 53, -120, -85, 62, 17, -9, 76, -46, 59, 117, 91, 32, 8, 18, -29, 3, -67, 118, 36, 43, -1, -116, -32, 19, 6, 23, -17, 0, 68, -60, -126, 16, -21, 113, -38, -128, -60, 78, -88, -127, 8, 0, 43, -13, 92, 100, -40, -28, 114, -72, 59, -68, -111, -18, 103, -120, -75, -91, -126, 120, 91, 23, 32, 114, 79, -111, -70, 106, 94, -10, 47, 64, -37, -25, 120, 83, 10, -73, -25, 1, 80, 89, 121, 57, 65, 30, 32, 40, 89, 88, -3, 7, 107, 63, 78, 57, -3, 107, 21, -65, 71, 106, -69, -98, 47, -117, -44, -74, -5, -5, -110, -77, -62, 119, 25, -107, -88, 44, 11, 82, 103, -70, 0, 0, 0, 1, 0, 0, 0, -128, 74, 42, -34, -115, -99, -8, -111, 94, 54, 28, -63, 127, 52, -38, -99, -73, 15, 57, -122, 30, -110, -22, 116, 23, -42, 81, 70, 14, 39, 61, 83, -68, 79, 67, -108, -64, -93, -101, -1, -4, 39, 86, -107, -81, -23, -71, -89, 26, -66, -128, -114, 124, 63, 30, -32, -72, -122, -43, -15, -2, 40, 126, 77, 43, -113, 84, 45, -65, -7, -86, -42, 67, -51, -112, -94, 120, -56, -86, -30, -86, 62, -116, -112, -46, -102, 21, 16, 107, -123, 19, 92, 96, -124, -39, 24, -102, -29, -74, -38, -19, -76, -52, 87, -93, -39, -18, -102, 122, -123, -114, -62, -47, 83, 98, 20, 23, 22, 50, -96, -23, 68, 112, 85, 89, -7, 87, -117, -86, 0, 0, 0, 2, 0, 0, 0, -128, 1, -61, 78, 127, 6, -109, -2, 25, 13, -73, 98, -39, 54, -86, 51, 7, -27, -2, -38, 32, -96, -101, -76, 39, -127, 46, 13, 29, -12, 87, 24, 4, -79, 23, -79, -38, -51, 57, 45, -78, 100, 122, -47, 70, 81, 77, 56, -97, -120, -4, -123, 118, -57, -28, -11, 7, -15, 59, -18, 29, 72, -10, 45, 107, 53, -77, 74, -16, 67, -128, 65, 33, -122, 11, -41, -117, -101, -106, 33, 91, 124, 93, 78, -22, -56, -84, 83, -66, 40, 26, 3, 47, 90, 115, -102, 127, -73, 5, 107, 3, -1, -58, -83, 26, -7, -15, -66, 35, 49, -122, -10, -32, -61, -56, 5, -8, 40, -75, -67, 69, -68, -64, 37, 98, 33, -46, -73, 49, 0, 0, 0, 3, 0, 0, 0, -128, 109, -4, -55, -57, -81, -22, 25, -24, 117, -29, 2, 114, 28, -15, -60, -39, 5, -17, 71, -106, 54, -113, -118, 23, 109, 59, -94, 49, -36, 125, 33, 80, -21, -73, -128, -93, 90, -4, 48, -33, 49, -53, 26, 39, -41, -16, 112, -118, -89, -51, 115, -119, -98, -88, 112, 36, 32, -78, 117, -22, -90, 76, 102, 22, 19, -126, 92, 65, -19, 104, -46, 89, 73, -62, 94, -114, 88, 120, -6, -102, 122, -116, -17, 122, -109, 70, 58, -78, -82, -38, -127, 65, -94, -61, 12, -16, 59, -98, 52, 29, -95, 38, -110, -91, 59, -66, 45, 65, 2, 105, -7, -114, 17, 38, 116, -119, 13, -109, -102, 60, -77, 37, 117, -122, -14, -93, -103, -55, 0, 0, 0, 0, 0, 0, 0, 20, 19, 23, 58, 98, -122, 109, -86, 75, -98, -84, 18, -96, -37, -120, 91, 71, 69, 104, 2, -16, 0, 0, 0, 2, 0, 0, 0, -128, 120, 47, -12, 68, -114, -38, 18, 15, 23, 75, -15, 91, 63, 103, -112, 117, -31, 42, 53, 63, 28, 66, 27, -64, 29, -109, -12, 26, 50, -55, 93, 118, -49, 47, 18, -39, 102, 32, -5, 92, -24, 65, -94, 103, 35, -61, 75, 102, -62, -76, -97, 101, 89, -120, -24, -16, -113, -6, -26, 91, 58, 70, 109, 125, -108, -75, -114, 93, -41, -49, -11, -74, 21, -119, 61, -74, 43, 51, -75, 111, 105, 45, -85, 85, -60, 29, -47, -18, 13, -14, -27, -55, 41, -94, 85, 43, 44, 45, 67, 40, -89, -49, -18, -68, -75, 105, 92, 121, -7, -64, 7, 17, -67, 98, 105, -7, -50, -103, 26, 64, 115, -48, -29, -118, -51, 19, -5, 116};

	private AbePrivateKey privateKey;
	private AbeEncrypted encrypted;
	
	
	@Override
	public void initializeIteration(int iteration) {
		String[] splitAttributes = new String[iteration + 1]; // at least one

		for (int i = 0; i < splitAttributes.length; i++) {
			splitAttributes[i] = "a" + UUID.randomUUID().toString().replace('-', '0'); // policy attribute have to begin with a letter
		}

		String policy = splitAttributes[0];
		String attributes = splitAttributes[0];
		for (int i = 1; i < splitAttributes.length; i++) {
			attributes += " " + splitAttributes[i];
			policy += " and " + splitAttributes[i];
		}
		
		try {
			encrypted = Cpabe.encrypt(msk.getPublicKey(), policy, data);
			privateKey = Cpabe.keygen(msk, attributes);
		} catch (Exception e) {
			throw new RuntimeException("exception thrown iteration initialization", e);
		}
	}
	
	@Override
	public void singleRun(int iteration) {
		try {
			Bsw07.decrypt(privateKey, encrypted.getCipher());
		} catch (Exception e) {
			throw new RuntimeException("exception thrown during test", e);
		}
	}

	@Override
	public void initializeBenchmark() {
		try {
			msk = AbeSecretMasterKey.readFromByteArray(mskData);
		} catch (IOException e) {
			throw new RuntimeException("exception thrown during initialization");
		}
		data = new byte[255]; // not actually relevant, since we dont really encrypt this
		for (int i = 0; i < data.length; i++) {
			data[i] = (byte) (i % 256);
		}
	}

	@Override
	public int numWarmupRuns() {
		return 5;
	}

	@Override
	public int numIterations() {
		return 20;
	}

	@Override
	public int numRunsPerIteration() {
		return 5;
	}

}
